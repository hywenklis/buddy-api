name: CI Publish Results

on:
  workflow_run:
    types: [ completed ]
    workflows: [ CI Tests ]

jobs:
  publish_results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: Tests Results
          junit_files: '**/build/test-results/**/*.xml'
          strategy: replace

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        continue-on-error: true
        with:
          paths: ${{ github.workspace }}/**/build/reports/jacoco/test/*.xml,
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 80
          debug-mode: true
          title: Code Coverage
          update-comment: true

      - name: Report Coverage Metrics
        run: |
          echo "Total coverage ${{ steps.jacoco.outputs.coverage-overall }}"
          echo "Changed Files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}"

      - name: Create and push tag
        if: github.event_name == 'push' && contains(github.ref, 'refs/heads/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --prune --tags
          VERSION=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null)
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
            git tag $VERSION
          else
            VERSION_BITS=(${VERSION//./ })
            VNUM1=${VERSION_BITS[0]}
            VNUM2=${VERSION_BITS[1]}
            VNUM3=${VERSION_BITS[2]}
            if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
              VNUM3=$((VNUM3+1))
            elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
              VNUM2=$((VNUM2+1))
              VNUM3=0
            fi
            NEW_TAG="$VNUM1.$VNUM2.$VNUM3"
            while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
              VNUM3=$((VNUM3+1))
              NEW_TAG="$VNUM1.$VNUM2.$VNUM3"
            done
            echo "Updating $VERSION to $NEW_TAG"
            git tag $NEW_TAG
          fi
          git push origin --tags