name: Code Review com IA

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop
      - 'release/*'
      - 'hotfix/*'

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      issues: read
      checks: write
      pull-requests: write

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2.12.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verificar tipo de evento
        id: check_event
        run: |
          if [ "${{ github.event.action }}" == "opened" ]; then
            echo "IS_NEW_PR=true" >> $GITHUB_ENV
          else
            echo "IS_NEW_PR=false" >> $GITHUB_ENV
          fi
          echo "PREVIOUS_SHA=${{ github.event.before || github.event.pull_request.base.sha }}" >> $GITHUB_ENV

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin --unshallow || true
          DIFF=$(git diff ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }})
          echo "$DIFF" > diff.txt
          if [ -z "$DIFF" ] || [ ${#DIFF} -lt 50 ]; then
            echo "SKIP_REVIEW=true" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Diff vazio ou muito pequeno, pulando revis√£o."
          else
            echo "SKIP_REVIEW=false" >> $GITHUB_ENV
          fi
          delimiter=$(openssl rand -hex 8)
          echo "$DIFF" > diff.txt
          if [ -z "$DIFF" ] || [ ${#DIFF} -lt 50 ]; then
            echo "SKIP_REVIEW=true" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Diff vazio ou muito pequeno, pulando revis√£o."
          else
            echo "SKIP_REVIEW=false" >> $GITHUB_ENV
          fi

      - name: Debug diff
        run: |
          echo "Diff tem $(wc -l < diff.txt) linhas"
          head -n 100 diff.txt

      - name: Gerar resumo da PR em markdown
        id: generate_summary
        if: ${{ env.SKIP_REVIEW == 'false' }}
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          ESCAPED_DIFF=$(jq -Rs . < diff.txt)

          cat > payload.json <<EOF
          {
            "model": "deepseek/deepseek-chat-v3-0324:free",
            "messages": [
              {
                "role": "system",
                "content": "Voc√™ √© um engenheiro de software experiente e revisor de c√≥digo. Analise o diff de c√≥digo fornecido e gere um resumo em formato markdown para um coment√°rio de Pull Request. O resumo deve ser claro, organizado e incluir: 1. **Vis√£o Geral**: uma breve descri√ß√£o do que a PR faz; 2. **Prop√≥sito**: o motivo das altera√ß√µes e o problema que resolve ou funcionalidade adicionada; 3. **Altera√ß√µes**: uma lista dos arquivos modificados com descri√ß√µes detalhadas de cada mudan√ßa, incluindo trechos de c√≥digo relevantes em blocos markdown (use a linguagem correta); 4. **Impacto**: como as altera√ß√µes afetam o c√≥digo, funcionalidade, desempenho ou manuten√ß√£o; 5. **Testes**: como as mudan√ßas foram testadas e quaisquer novos testes adicionados; 6. **Notas**: informa√ß√µes adicionais √∫teis para revisores, como depend√™ncias ou pr√≥ximos passos. Use cabe√ßalhos, listas e blocos de c√≥digo para m√°xima clareza. A resposta deve estar em PORTUGU√äS BRASILEIRO e em formato markdown puro. Mas n√£o traga com \`\`\`markdown\`\`\` apenas o bloco que conteria dentro dele."
              },
              {
                "role": "user",
                "content": $ESCAPED_DIFF
              }
            ]
          }
          EOF
      
          RESPONSE=$(curl -s https://openrouter.ai/api/v1/chat/completions \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $OPENROUTER_API_KEY" \
          --data-binary @payload.json)
          
          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // ""')
          
          if [ -z "$SUMMARY" ]; then
          echo "‚ö†Ô∏è Resumo n√£o gerado pela IA, usando fallback."
          SUMMARY="# Resumo da PR\n\nNenhuma descri√ß√£o detalhada gerada. Altera√ß√µes detectadas no diff, mas sem resumo espec√≠fico."
          fi
          
          echo "$SUMMARY" > summary.md
          echo "has_summary=true" >> $GITHUB_OUTPUT

      - name: Atualizar descri√ß√£o da PR com o resumo
        if: ${{ env.SKIP_REVIEW == 'false' && steps.generate_summary.outputs.has_summary == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');

            if (!summary.trim()) {
              console.log("‚ö†Ô∏è Resumo vazio, n√£o atualizando descri√ß√£o.");
              return;
            }

            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;

            // Recupera a descri√ß√£o atual
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number
            });

            const novaDescricao = `### ü§ñ Resumo autom√°tico da IA\n\n${summary}\n\n---\n${pr.body || ''}`.trim();

            await github.rest.pulls.update({
              owner,
              repo,
              pull_number,
              body: novaDescricao
            });

            console.log("‚úÖ Descri√ß√£o da PR atualizada com o resumo da IA.");
