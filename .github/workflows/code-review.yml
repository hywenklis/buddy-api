name: Code Review com IA

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop
      - 'release/*'
      - 'hotfix/*'

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      issues: read
      checks: write
      pull-requests: write

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2.12.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verificar tipo de evento
        id: check_event
        run: |
          if [ "${{ github.event.action }}" == "opened" ]; then
            echo "IS_NEW_PR=true" >> $GITHUB_ENV
          else
            echo "IS_NEW_PR=false" >> $GITHUB_ENV
          fi
          echo "PREVIOUS_SHA=${{ github.event.before || github.event.pull_request.base.sha }}" >> $GITHUB_ENV

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }}
          if [ "${{ env.IS_NEW_PR }}" == "false" ]; then
            DIFF=$(git diff ${{ env.PREVIOUS_SHA }}..${{ github.sha }})
          else
            DIFF=$(git diff origin/${{ github.base_ref }}..${{ github.sha }})
          fi
          delimiter=$(openssl rand -hex 8)
          echo "DIFF<<$delimiter" >> $GITHUB_ENV
          echo "$DIFF" >> $GITHUB_ENV
          echo "$delimiter" >> $GITHUB_ENV
          if [ -z "$DIFF" ] || [ ${#DIFF} -lt 50 ]; then
            echo "SKIP_REVIEW=true" >> $GITHUB_ENV
            echo "⚠️ Diff vazio ou muito pequeno, pulando revisão."
          else
            echo "SKIP_REVIEW=false" >> $GITHUB_ENV
          fi

      - name: Gerar resumo da PR em markdown
        id: generate_summary
        if: ${{ env.SKIP_REVIEW == 'false' }}
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          DIFF: ${{ env.DIFF }}
        run: |
          echo "$DIFF" > diff.txt
          ESCAPED_DIFF=$(printf '%s' "$DIFF" | jq -Rs .)
          JSON_PAYLOAD=$(cat <<EOF
          {
            "model": "deepseek/deepseek-chat-v3-0324:free",
            "messages": [
              {
                "role": "system",
                "content": "Você é um engenheiro de software experiente e revisor de código. Analise o diff de código fornecido e gere um resumo em formato markdown para um comentário de Pull Request. O resumo deve ser claro, organizado e incluir: 1. **Visão Geral**: uma breve descrição do que a PR faz; 2. **Propósito**: o motivo das alterações e o problema que resolve ou funcionalidade adicionada; 3. **Alterações**: uma lista dos arquivos modificados com descrições detalhadas de cada mudança, incluindo trechos de código relevantes em blocos markdown (use a linguagem correta); 4. **Impacto**: como as alterações afetam o código, funcionalidade, desempenho ou manutenção; 5. **Testes**: como as mudanças foram testadas e quaisquer novos testes adicionados; 6. **Notas**: informações adicionais úteis para revisores, como dependências ou próximos passos. Use cabeçalhos, listas e blocos de código para máxima clareza. A resposta deve estar em PORTUGUÊS BRASILEIRO e em formato markdown puro. Mas não traga com \`\`\`markdown\`\`\` apenas o bloco que conteria dentro dele."
              },
              {
                "role": "user",
                "content": $ESCAPED_DIFF
              }
            ]
          }
          EOF
          )
          RESPONSE=$(curl -s https://openrouter.ai/api/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENROUTER_API_KEY" \
            -d "$JSON_PAYLOAD")
          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // ""')
          if [ -z "$SUMMARY" ] || [ "$SUMMARY" = "" ]; then
            echo "⚠️ Resumo não gerado pela IA, usando fallback."
            SUMMARY="# Resumo da PR\n\nNenhuma descrição detalhada gerada. Alterações detectadas no diff, mas sem resumo específico."
          fi
          echo "$SUMMARY" > summary.md
          echo "has_summary=true" >> $GITHUB_OUTPUT

      - name: Postar resumo da PR como comentário
        if: ${{ env.SKIP_REVIEW == 'false' && steps.generate_summary.outputs.has_summary == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');
            if (!summary.trim()) {
              console.log("⚠️ Resumo vazio, não postando comentário.");
              return;
            }
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            const commit_id = context.payload.pull_request.head.sha;
            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              commit_id,
              event: "COMMENT",
              body: `# Revisão Automática da PR (Execução #${process.env.GITHUB_RUN_NUMBER})\n\n${summary}`,
              comments: []
            });
            console.log("✅ Resumo da PR postado com sucesso.");