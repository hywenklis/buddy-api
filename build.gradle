plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
	id 'checkstyle'
	id 'com.github.spotbugs' version '6.0.15'
	id 'com.palantir.git-version' version '3.0.0'
}

bootJar {
	archiveFileName = 'app.jar'
}

jar {
	enabled = false
}

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.1")
}

dependencies {
	implementation 'io.micrometer:micrometer-tracing-bridge-brave:1.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	implementation 'org.springframework.cloud:spring-cloud-config-client'
	implementation 'org.springframework.cloud:spring-cloud-starter'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'com.github.spotbugs:spotbugs:4.8.5'

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.projectlombok:lombok'
	testImplementation 'com.h2database:h2'
	testImplementation 'org.apache.commons:commons-lang3:3.14.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

def details = versionDetails()

springBoot {
	buildInfo {
		group = "com.buddy.api"
		version = details.lastTag ?: "0.0.0"
		properties {
			additional = [
					'developers': 'hywenklis.'
			]
		}
	}
}

tasks.named('test') {
	dependsOn checkstyleMain, checkstyleTest
	useJUnitPlatform()
	finalizedBy("jacocoTestReport")
}

tasks.jacocoTestReport {
	reports {
		xml.required.set(true)
		csv.required.set(true)
		html.required.set(true)
	}
}

checkstyle {
	toolVersion = '10.12.7'
	configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
	maxWarnings = 0
	showViolations = true
	ignoreFailures = false
}

tasks.withType(Checkstyle).configureEach {
	reports {
		xml.required = false
		html.required = true
		html.stylesheet resources.text.fromFile('config/checkstyle/xsl/checkstyle-custom.xsl')
	}
}

checkstyleMain {
	dependsOn compileJava
}

checkstyleTest {
	dependsOn compileTestJava
}

spotbugs {
	toolVersion = '4.8.3'
	ignoreFailures = false
	showStackTraces = true
	showProgress = true
}
